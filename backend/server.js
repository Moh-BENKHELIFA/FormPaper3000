const express = require('express');
const cors = require('cors');
const multer = require('multer');
const axios = require('axios');
const path = require('path');
const fs = require('fs');
const { spawn } = require('child_process');
const { promisify } = require('util');

// Import de la base de donn√©es
const { paperDB, READING_STATUS } = require('./src/database');

const app = express();
const PORT = 5324;

// Middleware
app.use(cors());
app.use(express.json());

// Configuration multer pour l'upload de fichiers
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = 'uploads/';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  }
});

// Initialisation de la base de donn√©es au d√©marrage
// Initialisation de la base de donn√©es au d√©marrage
async function initializeApp() {
  try {
    console.log('üîó Connexion √† la base de donn√©es...');
    await paperDB.connect();
    
    // ‚ùå NE PAS APPELER paperDB.initialize() car cela ferme la DB !
    // await paperDB.initialize(); // <-- ENLEVER CETTE LIGNE
    
    console.log('‚úÖ Base de donn√©es connect√©e avec succ√®s');
    
    // Test de sant√© initial
    try {
      const testStats = await paperDB.getStats();
      console.log('üß™ Test stats initial r√©ussi:', testStats);
    } catch (testError) {
      console.warn('‚ö†Ô∏è Warning test stats initial:', testError.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base:', error);
    throw error;
  }
}

// Fonction pour extraire les images d'un PDF avec Python
async function extractImagesFromPdf(pdfPath, outputFolder) {
  return new Promise((resolve, reject) => {
    const scriptPath = path.join(__dirname, 'scripts', 'extract_images.py');
    
    if (!fs.existsSync(scriptPath)) {
      reject(new Error(`Script Python non trouv√©: ${scriptPath}`));
      return;
    }

    console.log(`Extraction des images du PDF: ${pdfPath}`);
    console.log(`Dossier de sortie: ${outputFolder}`);

    const pythonProcess = spawn('python', [scriptPath, pdfPath, outputFolder]);
    
    let output = '';
    let errorOutput = '';

    pythonProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    pythonProcess.on('close', (code) => {
      console.log(`Script d'extraction d'images termin√© avec le code: ${code}`);
      console.log(`Sortie stderr: ${errorOutput}`);

      if (code === 0 && output.trim()) {
        try {
          const extractedImages = JSON.parse(output.trim());
          console.log(`${extractedImages.length} images extraites`);
          resolve(extractedImages);
        } catch (parseError) {
          console.error('Erreur lors du parsing JSON:', parseError);
          resolve([]);
        }
      } else {
        console.log('Aucune image extraite du PDF');
        resolve([]);
      }
    });

    pythonProcess.on('error', (error) => {
      console.error('Erreur lors de l\'extraction des images:', error.message);
      resolve([]);
    });
  });
}

async function extractDoiFromPdf(pdfPath) {
  return new Promise((resolve, reject) => {
    const scriptPath = path.join(__dirname, 'scripts', 'extract_doi.py');
    
    if (!fs.existsSync(scriptPath)) {
      reject(new Error(`Script Python non trouv√©: ${scriptPath}`));
      return;
    }

    console.log(`Ex√©cution du script Python: ${scriptPath}`);
    console.log(`Fichier PDF √† analyser: ${pdfPath}`);

    const pythonProcess = spawn('python', [scriptPath, pdfPath]);
    
    let output = '';
    let errorOutput = '';

    pythonProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    pythonProcess.on('close', (code) => {
      console.log(`Script Python termin√© avec le code: ${code}`);
      console.log(`Sortie stderr: ${errorOutput}`);

      if (code === 0 && output.trim()) {
        const doi = output.trim();
        console.log(`DOI extrait avec succ√®s: ${doi}`);
        resolve(doi);
      } else {
        console.log('Aucun DOI trouv√© dans le PDF');
        resolve(null);
      }
    });

    pythonProcess.on('error', (error) => {
      console.error('Erreur lors de l\'ex√©cution de Python:', error.message);
      
      if (error.code === 'ENOENT') {
        reject(new Error('Python n\'est pas install√© ou n\'est pas dans le PATH. Veuillez installer Python et PyMuPDF (pip install PyMuPDF).'));
      } else {
        reject(error);
      }
    });
  });
}

// ================================
// ROUTES - ORDRE CORRECT
// ================================

// Health check am√©lior√© avec v√©rification DB
app.get('/api/health', async (req, res) => {
  try {
    const health = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      database: {
        connected: false,
        stats: null,
        error: null
      }
    };

    // Test de connexion √† la base
    try {
      health.database.connected = paperDB.isConnectedToDB();
      
      if (!health.database.connected) {
        console.log('üîÑ Tentative de reconnexion √† la base...');
        await paperDB.connect();
        health.database.connected = true;
      }
      
      // Test simple des stats
      const testStats = await paperDB.getStats();
      health.database.stats = testStats;
      
    } catch (dbError) {
      console.error('‚ùå Erreur health check DB:', dbError);
      health.database.error = dbError.message;
      health.status = 'warning';
    }

    const statusCode = health.status === 'ok' ? 200 : 206;
    res.status(statusCode).json(health);
    
  } catch (error) {
    console.error('‚ùå Erreur health check g√©n√©ral:', error);
    res.status(500).json({
      status: 'error',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Endpoint de diagnostic avanc√© 
app.get('/api/diagnostic', async (req, res) => {
  try {
    const diagnostic = {
      server: {
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        version: process.version
      },
      database: {
        connected: paperDB.isConnectedToDB(),
        canQuery: false,
        tablesExist: false
      }
    };

    // Test de requ√™te simple
    try {
      const db = require('./src/database/database').getDatabase();
      const result = await new Promise((resolve, reject) => {
        db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='Papers'", (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });
      
      diagnostic.database.canQuery = true;
      diagnostic.database.tablesExist = !!result;
      
    } catch (queryError) {
      diagnostic.database.error = queryError.message;
    }

    res.json(diagnostic);
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ================================
// ROUTES PAPERS - SP√âCIFIQUES D'ABORD
// ================================

// R√©cup√©rer les m√©tadonn√©es depuis un DOI
app.post('/api/papers/metadata-from-doi', async (req, res) => {
  try {
    const { doi } = req.body;
    
    if (!doi) {
      return res.status(400).json({ error: 'DOI requis' });
    }

    console.log(`üîç R√©cup√©ration des m√©tadonn√©es pour DOI: ${doi}`);

    const response = await axios.get(`https://api.crossref.org/works/${doi}`, {
      headers: {
        'User-Agent': 'FormPaper3000/1.0 (https://github.com/yourrepo/formpaper3000; mailto:your-email@example.com)'
      }
    });

    const work = response.data.message;
    
    const paperData = {
      title: work.title?.[0] || '',
      authors: work.author?.map(a => `${a.given || ''} ${a.family || ''}`).join(', ') || '',
      doi: work.DOI || doi,
      url: work.URL || `https://doi.org/${doi}`,
      publication_date: work.published?.['date-parts']?.[0] ? 
        `${work.published['date-parts'][0][0]}-${String(work.published['date-parts'][0][1] || 1).padStart(2, '0')}-${String(work.published['date-parts'][0][2] || 1).padStart(2, '0')}` : 
        new Date().toISOString().split('T')[0],
      conference: work['container-title']?.[0] || '',
      reading_status: 'non_lu'
    };

    console.log(`‚úÖ M√©tadonn√©es r√©cup√©r√©es: ${paperData.title}`);
    res.json({ paperData });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des m√©tadonn√©es:', error.message);
    
    if (error.response?.status === 404) {
      res.status(404).json({ 
        error: 'DOI non trouv√©',
        message: 'Ce DOI n\'existe pas dans la base Crossref'
      });
    } else {
      res.status(500).json({ 
        error: 'Erreur lors de la r√©cup√©ration des m√©tadonn√©es',
        message: error.message
      });
    }
  }
});

// Extraire les images d'un PDF
app.post('/api/papers/extract-images', upload.single('pdf'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Fichier PDF requis' });
    }

    const pdfPath = req.file.path;
    const outputFolder = path.join('uploads', 'extracted_images', Date.now().toString());

    if (!fs.existsSync(outputFolder)) {
      fs.mkdirSync(outputFolder, { recursive: true });
    }

    console.log(`üìÑ Extraction des images du PDF: ${req.file.originalname}`);
    
    const extractedImages = await extractImagesFromPdf(pdfPath, outputFolder);
    
    // Nettoyer le fichier PDF temporaire
    fs.unlinkSync(pdfPath);

    const images = extractedImages.map(img => ({
      name: img.name,
      url: `http://localhost:${PORT}/${img.path}`,
      page: img.page
    }));

    console.log(`üñºÔ∏è ${images.length} images extraites`);
    res.json({ images });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'extraction des images:', error.message);
    
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    res.status(500).json({ 
      error: 'Erreur lors de l\'extraction des images',
      message: error.message
    });
  }
});

// Route extract-from-pdf corrig√©e - Remplacez votre route actuelle par celle-ci
app.post('/api/papers/extract-from-pdf', upload.single('pdf'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Fichier PDF requis' });
    }

    console.log(`üìÑ Extraction des m√©tadonn√©es du PDF: ${req.file.originalname}`);
    
    const doi = await extractDoiFromPdf(req.file.path);
    
    if (!doi) {
      // Pas de DOI trouv√© - cr√©er des donn√©es de base
      const fallbackData = {
        title: path.parse(req.file.originalname).name,
        authors: '',
        doi: '',
        conference: '',
        publication_date: new Date().toISOString().split('T')[0],
        url: '',
        reading_status: 'non_lu'
      };
      
      fs.unlinkSync(req.file.path);
      console.log('üìù Aucun DOI trouv√© - m√©tadonn√©es de base:', fallbackData);
      
      // ‚úÖ Format compatible avec paperService.extractDataFromPDF()
      return res.json({ paperData: fallbackData });
    }

    console.log(`üîç DOI extrait du PDF: ${doi}`);

    try {
      // R√©cup√©rer les m√©tadonn√©es via Crossref
      const crossrefUrl = `https://api.crossref.org/works/${doi}`;
      
      const response = await axios.get(crossrefUrl, {
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'PaperManager/1.0 (mailto:user@example.com)'
        },
        timeout: 10000
      });

      const work = response.data.message;
      
      const authors = work.author 
        ? work.author.map(a => `${a.given || ''} ${a.family || ''}`.trim()).filter(a => a)
        : [];

      const paperData = {
        title: work.title ? work.title[0] : path.parse(req.file.originalname).name,
        authors: authors.length > 0 ? authors.join(', ') : '',
        doi: work.DOI || doi,
        conference: work['container-title'] ? work['container-title'][0] : '',
        publication_date: work.published 
          ? `${work.published['date-parts'][0][0]}-${String(work.published['date-parts'][0][1] || 1).padStart(2, '0')}-${String(work.published['date-parts'][0][2] || 1).padStart(2, '0')}`
          : new Date().toISOString().split('T')[0],
        url: work.URL || `https://doi.org/${doi}`,
        reading_status: 'non_lu'
      };

      fs.unlinkSync(req.file.path);

      console.log('‚úÖ M√©tadonn√©es r√©cup√©r√©es via Crossref:', paperData);
      
      // ‚úÖ Format compatible avec paperService.extractDataFromPDF()
      res.json({ paperData });

    } catch (crossrefError) {
      console.error('‚ö†Ô∏è Erreur Crossref:', crossrefError.message);
      
      // Fallback avec le DOI trouv√© mais m√©tadonn√©es minimales
      const fallbackData = {
        title: path.parse(req.file.originalname).name,
        authors: '',
        doi: doi,
        conference: '',
        publication_date: new Date().toISOString().split('T')[0],
        url: `https://doi.org/${doi}`,
        reading_status: 'non_lu'
      };

      fs.unlinkSync(req.file.path);
      
      console.log('üìù M√©tadonn√©es fallback avec DOI:', fallbackData);
      
      // ‚úÖ Format compatible avec paperService.extractDataFromPDF()
      res.json({ paperData: fallbackData });
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'extraction PDF:', error.message);
    
    // Nettoyer le fichier temporaire
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    res.status(500).json({ 
      error: 'Erreur lors de l\'extraction des m√©tadonn√©es PDF',
      message: error.message
    });
  }
});

// Upload d'image
app.post('/api/papers/upload-image', upload.single('image'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Fichier image requis' });
    }

    const imageUrl = `http://localhost:${PORT}/uploads/${req.file.filename}`;
    
    console.log(`üñºÔ∏è Image upload√©e: ${imageUrl}`);
    res.json({ imageUrl });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'upload:', error.message);
    res.status(500).json({ 
      error: 'Erreur lors de l\'upload de l\'image',
      message: error.message
    });
  }
});

// ‚úÖ STATISTIQUES EN PREMIER (AVANT LES ROUTES G√âN√âRIQUES)
app.get('/api/papers/stats', async (req, res) => {
  try {
    console.log('üìä R√©cup√©ration des statistiques...');
    
    // V√©rifier que la base est connect√©e
    if (!paperDB.isConnectedToDB()) {
      console.log('‚ö†Ô∏è Base de donn√©es non connect√©e, tentative de reconnexion...');
      await paperDB.connect();
    }
    
    const stats = await paperDB.getStats();
    console.log('üìà Statistiques r√©cup√©r√©es:', stats);

    res.json({
      success: true,
      stats: stats
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des stats:', error);
    console.error('‚ùå Stack trace compl√®te:', error.stack);
    
    // Retourner des statistiques par d√©faut en cas d'erreur
    const defaultStats = {
      totalPapers: 0,
      readPapers: 0,
      inProgressPapers: 0,
      unreadPapers: 0,
      totalCategories: 0
    };
    
    res.status(200).json({ 
      success: true,
      stats: defaultStats,
      warning: 'Statistiques par d√©faut retourn√©es suite √† une erreur',
      error_details: error.message
    });
  }
});

// R√©cup√©rer tous les papers
app.get('/api/papers', async (req, res) => {
  try {
    console.log('üìñ R√©cup√©ration de tous les papers...');
    
    const papers = await paperDB.papers.getAll();
    console.log(`üìö ${papers.length} papers r√©cup√©r√©s`);

    res.json({
      success: true,
      papers: papers,
      total: papers.length
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des papers:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des papers',
      message: error.message
    });
  }
});

// Sauvegarder un paper dans la base avec cat√©gories
app.post('/api/papers', upload.single('pdf'), async (req, res) => {
  try {
    console.log('üíæ Sauvegarde d\'un nouveau paper...');
    console.log('Donn√©es re√ßues:', req.body);
    
    const paperData = req.body;
    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];
    
    // Validation des donn√©es essentielles
    if (!paperData.title || !paperData.authors || !paperData.doi || !paperData.url) {
      return res.status(400).json({ 
        error: 'Donn√©es manquantes',
        message: 'Titre, auteurs, DOI et URL sont requis'
      });
    }

    console.log(`üìù Cr√©ation du paper: ${paperData.title}`);
    console.log(`üè∑Ô∏è Cat√©gories: ${categories.join(', ')}`);

    // Pr√©parer les donn√©es du paper
    const paperToSave = {
      title: paperData.title,
      authors: paperData.authors,
      publication_date: paperData.publication_date || new Date().toISOString().split('T')[0],
      conference: paperData.conference || null,
      reading_status: paperData.reading_status || 'non_lu',
      image: paperData.image || null,
      doi: paperData.doi,
      url: paperData.url
    };

    // Buffer et nom du PDF si fourni
    const pdfBuffer = req.file ? fs.readFileSync(req.file.path) : null;
    const pdfName = req.file ? req.file.originalname : null;

    // Cr√©er le paper complet avec cat√©gories
    const savedPaper = await paperDB.createCompletePaper(
      paperToSave,
      pdfBuffer,
      pdfName,
      [], // extractedImages
      categories // categoryIds
    );

    // Nettoyer le fichier temporaire
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    console.log(`‚úÖ Paper sauvegard√© avec ID: ${savedPaper.id}`);

    // Statistiques
    const stats = await paperDB.getStats();
    console.log(`üìä Total papers en base: ${stats.totalPapers}`);

    res.status(201).json({ 
      success: true,
      id: savedPaper.id, 
      message: 'Paper sauvegard√© avec succ√®s',
      paper: savedPaper,
      stats: stats
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la sauvegarde:', error);
    
    // Nettoyer le fichier temporaire en cas d'erreur
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    // Gestion des erreurs sp√©cifiques
    if (error.message.includes('UNIQUE constraint failed')) {
      return res.status(409).json({ 
        error: 'DOI d√©j√† existant',
        message: 'Ce DOI existe d√©j√† dans la base de donn√©es'
      });
    }

    res.status(500).json({ 
      error: 'Erreur lors de la sauvegarde',
      message: error.message
    });
  }
});

// ‚úÖ ROUTES AVEC PARAM√àTRES EN DERNIER

// R√©cup√©rer un paper par ID avec d√©tails
app.get('/api/papers/:id', async (req, res) => {
  try {
    const paperId = parseInt(req.params.id);
    
    if (isNaN(paperId)) {
      return res.status(400).json({ error: 'ID invalide' });
    }

    console.log(`üîç R√©cup√©ration du paper ID: ${paperId}`);
    
    const paper = await paperDB.papers.getByIdWithDetails(paperId);
    
    if (!paper) {
      return res.status(404).json({ 
        error: 'Paper non trouv√©',
        message: `Aucun paper trouv√© avec l'ID ${paperId}`
      });
    }

    console.log(`üìÑ Paper r√©cup√©r√©: ${paper.title}`);
    res.json({
      success: true,
      paper: paper
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du paper:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration du paper',
      message: error.message
    });
  }
});

// Mettre √† jour un paper avec cat√©gories
app.put('/api/papers/:id', async (req, res) => {
  try {
    const paperId = parseInt(req.params.id);
    const updates = req.body;
    const categories = updates.categories || [];
    
    if (isNaN(paperId)) {
      return res.status(400).json({ error: 'ID invalide' });
    }

    console.log(`‚úèÔ∏è Mise √† jour du paper ID: ${paperId}`);
    console.log('Donn√©es de mise √† jour:', updates);

    // Mettre √† jour le paper
    const updatedPaper = await paperDB.papers.update(paperId, updates);
    
    if (!updatedPaper) {
      return res.status(404).json({ 
        error: 'Paper non trouv√©',
        message: `Aucun paper trouv√© avec l'ID ${paperId}`
      });
    }

    // Mettre √† jour les cat√©gories si fournies
    if (categories.length >= 0) {
      await paperDB.paperCategories.setPaperCategories(paperId, categories);
    }

    // R√©cup√©rer le paper mis √† jour avec d√©tails
    const paperWithDetails = await paperDB.papers.getByIdWithDetails(paperId);

    console.log(`‚úÖ Paper ${paperId} mis √† jour avec succ√®s`);
    res.json({
      success: true,
      paper: paperWithDetails,
      message: 'Paper mis √† jour avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du paper:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la mise √† jour du paper',
      message: error.message
    });
  }
});

// Supprimer un paper
app.delete('/api/papers/:id', async (req, res) => {
  try {
    const paperId = parseInt(req.params.id);
    
    if (isNaN(paperId)) {
      return res.status(400).json({ error: 'ID invalide' });
    }

    console.log(`üóëÔ∏è Suppression du paper ID: ${paperId}`);
    
    const deleted = await paperDB.deleteCompletePaper(paperId);
    
    if (!deleted) {
      return res.status(404).json({ 
        error: 'Paper non trouv√©',
        message: `Aucun paper trouv√© avec l'ID ${paperId}`
      });
    }

    console.log(`‚úÖ Paper ${paperId} supprim√© avec succ√®s`);
    res.json({
      success: true,
      message: 'Paper supprim√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du paper:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la suppression du paper',
      message: error.message
    });
  }
});

// ================================
// ROUTES CAT√âGORIES
// ================================

// R√©cup√©rer toutes les cat√©gories
app.get('/api/categories', async (req, res) => {
  try {
    console.log('üè∑Ô∏è R√©cup√©ration des cat√©gories...');
    
    // V√©rifier la connexion DB
    if (!paperDB.isConnectedToDB()) {
      console.log('‚ö†Ô∏è Base de donn√©es non connect√©e, tentative de reconnexion...');
      await paperDB.connect();
    }
    
    const categories = await paperDB.categories.getAll();
    console.log(`üìù ${categories.length} cat√©gories r√©cup√©r√©es`);

    res.json({
      success: true,
      categories: categories
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des cat√©gories:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des cat√©gories',
      message: error.message
    });
  }
});

// Cr√©er une nouvelle cat√©gorie
app.post('/api/categories', async (req, res) => {
  try {
    const { name } = req.body;
    
    if (!name || !name.trim()) {
      return res.status(400).json({ 
        error: 'Nom de cat√©gorie requis' 
      });
    }

    console.log(`üÜï Cr√©ation de la cat√©gorie: ${name}`);
    
    const categoryId = await paperDB.categories.create(name.trim());
    const category = await paperDB.categories.getById(categoryId);
    console.log(`‚úÖ Cat√©gorie cr√©√©e avec l'ID: ${categoryId}`);

    res.status(201).json({
      success: true,
      id: categoryId,
      category: category,
      message: 'Cat√©gorie cr√©√©e avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la cat√©gorie:', error);
    
    if (error.message.includes('UNIQUE constraint failed')) {
      return res.status(409).json({ 
        error: 'Nom de cat√©gorie d√©j√† existant',
        message: 'Cette cat√©gorie existe d√©j√†'
      });
    }

    res.status(500).json({ 
      error: 'Erreur lors de la cr√©ation de la cat√©gorie',
      message: error.message
    });
  }
});

// Supprimer une cat√©gorie
app.delete('/api/categories/:id', async (req, res) => {
  try {
    const categoryId = parseInt(req.params.id);
    
    if (isNaN(categoryId)) {
      return res.status(400).json({ error: 'ID de cat√©gorie invalide' });
    }

    console.log(`üóëÔ∏è Suppression de la cat√©gorie ID: ${categoryId}`);
    
    const deleted = await paperDB.categories.delete(categoryId);
    
    if (!deleted) {
      return res.status(404).json({ 
        error: 'Cat√©gorie non trouv√©e',
        message: `Aucune cat√©gorie trouv√©e avec l'ID ${categoryId}`
      });
    }

    console.log(`‚úÖ Cat√©gorie ${categoryId} supprim√©e avec succ√®s`);
    res.json({
      success: true,
      message: 'Cat√©gorie supprim√©e avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de la cat√©gorie:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la suppression de la cat√©gorie',
      message: error.message
    });
  }
});

// ================================
// FICHIERS STATIQUES
// ================================

// Servir les fichiers statiques
app.use('/uploads', express.static('uploads'));
app.use('/MyPapers', express.static('MyPapers'));

// ================================
// ROUTE PAR D√âFAUT
// ================================

app.get('/', (req, res) => {
  res.json({ 
    message: 'API Paper Manager avec SQLite',
    version: '3.0.0',
    database: paperDB.isConnectedToDB() ? 'Connected' : 'Disconnected',
    endpoints: [
      'GET /api/health',
      'GET /api/diagnostic',
      'POST /api/papers/metadata-from-doi',
      'POST /api/papers/extract-images',
      'POST /api/papers/extract-from-pdf',
      'POST /api/papers/upload-image',
      'GET /api/papers/stats',
      'GET /api/papers',
      'POST /api/papers',
      'GET /api/papers/:id',
      'PUT /api/papers/:id',
      'DELETE /api/papers/:id',
      'GET /api/categories',
      'POST /api/categories',
      'DELETE /api/categories/:id'
    ]
  });
});

// ================================
// D√âMARRAGE DU SERVEUR
// ================================

// D√©marrage du serveur avec initialisation de la base
async function startServer() {
  try {
    await initializeApp();
    
    app.listen(PORT, () => {
      console.log(`üöÄ Serveur d√©marr√© sur http://localhost:${PORT}`);
      console.log(`üìä API disponible sur http://localhost:${PORT}/api`);
      console.log(`‚ù§Ô∏è Health check: http://localhost:${PORT}/api/health`);
      console.log(`üîç Diagnostic: http://localhost:${PORT}/api/diagnostic`);
      console.log(`üíæ Base de donn√©es SQLite: ${paperDB.isConnectedToDB() ? 'Connect√©e' : 'D√©connect√©e'}`);
      console.log(`üìà Statistiques: http://localhost:${PORT}/api/papers/stats`);
      console.log(`üè∑Ô∏è Cat√©gories: http://localhost:${PORT}/api/categories`);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage:', error);
    process.exit(1);
  }
}

// ================================
// GESTION DES ARR√äTS
// ================================

// Gestion des arr√™ts propres
process.on('SIGINT', async () => {
  console.log('üõë Arr√™t du serveur...');
  try {
    await paperDB.disconnect();
    console.log('‚úÖ Base de donn√©es ferm√©e proprement');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors de la fermeture:', error);
    process.exit(1);
  }
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error);
  console.error('‚ùå Stack:', error.stack);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  console.error('‚ùå Promise:', promise);
});

// Gestion gracieuse des erreurs lors de l'arr√™t
process.on('SIGTERM', async () => {
  console.log('üõë SIGTERM re√ßu, arr√™t gracieux...');
  try {
    await paperDB.disconnect();
    console.log('‚úÖ Arr√™t gracieux termin√©');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur arr√™t gracieux:', error);
    process.exit(1);
  }
});

// ================================
// D√âMARRAGE DE L'APPLICATION
// ================================

// D√©marrer l'application
startServer().catch((error) => {
  console.error('‚ùå Erreur fatale au d√©marrage:', error);
  process.exit(1);
});